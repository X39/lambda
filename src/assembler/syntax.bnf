FILE ::= STATEMENTS |;
STATEMENTS ::= STATEMENT STATEMENTS | STATEMENT;
STATEMENT ::= S_AWAIT | S_ABORT | S_EXIT | S_START | IF_ELSE | FOR | ASSIGNMENT;
S_AWAIT ::= AWAIT semicolon;
S_ABORT ::= ABORT semicolon;
S_EXIT ::= EXIT semicolon;
S_START ::= START semicolon;
AWAIT ::= AWAIT_ANY | AWAIT_ALL | AWAIT_CALL | AWAIT_IDENT;
AWAIT_ANY ::= await any ident;
AWAIT_ALL ::= await all ident;
AWAIT_CALL ::= await CALL;
AWAIT_IDENT ::= await ident;
CALL ::= ident roundopen VALUE roundclose;
VALUE ::= OBJ | ARRAY | RANGE | CONSTANT;
CONSTANT ::= null | number | string | true | false;
RANGE ::= number dotdot number;
ARRAY ::= squareopen ARRAY_DATA squareclose | squareopen squareclose;
ARRAY_DATA ::= VALUE comma ARRAY_DATA | VALUE comma | VALUE;
OBJ ::= curlyopen OBJ_DATA curlyclose | curlyopen curlyclose;
OBJ_DATA ::= OBJ_PROP comma OBJ_DATA | OBJ_PROP comma | OBJ_PROP;
OBJ_PROP ::= string colon VALUE;
ABORT ::= abort ident;
EXIT ::= exit;
IF_ELSE ::= IF ELSE | IF CODE;
IF ::= if AWAIT CODE | if ident CODE;
ELSE ::= else IF | else CODE;
CODE ::= curlyopen STATEMENTS curlyclose | curlyopen curlyclose;
FOR ::= FOR_VALUE | FOR_AWAIT_CALL | FOR_AWAIT_IDENT | FOR_IDENT;
FOR_VALUE ::= for ident in VALUE;
FOR_AWAIT_CALL ::= for ident in AWAIT_CALL;
FOR_AWAIT_IDENT ::= for ident in AWAIT_IDENT;
FOR_IDENT ::= for ident in ident;
ASSIGNMENT ::= ident equals VALUE | ident equals AWAIT | ident equals START;
START ::= start CALL;