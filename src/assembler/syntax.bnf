FILE ::= STATEMENTS |;
STATEMENTS ::= STATEMENT STATEMENTS | STATEMENT;
STATEMENT ::= S_AWAIT | S_ABORT | S_EXIT | S_START | IF_ELSE | FOR | ASSIGNMENT;
S_AWAIT ::= AWAIT semicolon;
S_ABORT ::= ABORT semicolon;
S_EXIT ::= EXIT semicolon;
S_START ::= START semicolon;
AWAIT ::= await AWAIT_ANY | await AWAIT_ALL | await AWAIT_CALL | await AWAIT_IDENT;
AWAIT_ANY ::= any ident;
AWAIT_ALL ::= all ident;
AWAIT_CALL ::= CALL;
AWAIT_IDENT ::= ident;
CALL ::= ident roundopen VALUE roundclose;
VALUE ::= OBJ | ARRAY | NUMERIC | CONSTANT;
CONSTANT ::= null | string | true | false;
NUMERIC ::= number dotdot number | number
ARRAY ::= squareopen ARRAY_DATA squareclose | squareopen squareclose;
ARRAY_DATA ::= VALUE comma ARRAY_DATA | VALUE comma | VALUE;
OBJ ::= curlyopen OBJ_DATA curlyclose | curlyopen curlyclose;
OBJ_DATA ::= OBJ_PROP comma OBJ_DATA | OBJ_PROP comma | OBJ_PROP;
OBJ_PROP ::= string colon VALUE;
ABORT ::= abort ident;
EXIT ::= exit;
IF_ELSE ::= IF ELSE | IF;
IF ::= if IF_PART;
IF_PART ::= AWAIT CODE | ident CODE;
ELSE ::= else ELSE_PART;
ELSE_PART ::= IF_ELSE | CODE;
CODE ::= curlyopen STATEMENTS curlyclose | curlyopen curlyclose;
FOR ::= for ident in FOR_VARIANT;
FOR_VARIANT ::=  FOR_VALUE | FOR_AWAIT_CALL | FOR_AWAIT_IDENT | FOR_IDENT;
FOR_VALUE ::=  VALUE;
FOR_AWAIT_CALL ::= AWAIT_CALL;
FOR_AWAIT_IDENT ::= AWAIT_IDENT;
FOR_IDENT ::= ident;
ASSIGNMENT ::= ident equals ASSIGNMENT_VALUE;
ASSIGNMENT_VALUE ::= VALUE | AWAIT | START;
START ::= start CALL;