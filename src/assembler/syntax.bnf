file ::= statements |;
statements ::= statement statements | statement;
statement ::= s_await | s_abort | s_exit | s_start | if_else | for | assignment;
s_await ::= await SEMICOLON;
s_abort ::= abort SEMICOLON;
s_exit ::= exit SEMICOLON;
s_start ::= start SEMICOLON;
await ::= AWAIT await_any | AWAIT await_all | AWAIT await_call_or_ident;
await_any ::= ANY IDENT;
await_all ::= ALL IDENT;
await_call_or_ident ::= call | IDENT;
call ::= IDENT ROUNDOPEN value ROUNDCLOSE | IDENT ROUNDOPEN ROUNDCLOSE;
value ::= obj | array | numeric | constant;
constant ::= NULL | STRING | TRUE | FALSE;
numeric ::= NUMBER DOTDOT NUMBER | NUMBER
array ::= SQUAREOPEN array_data SQUARECLOSE | SQUAREOPEN SQUARECLOSE;
array_data ::= IDENT COMMA array_data | value COMMA array_data | IDENT COMMA | value COMMA | IDENT | value;
obj ::= CURLYOPEN obj_data CURLYCLOSE | CURLYOPEN CURLYCLOSE;
obj_data ::= obj_prop COMMA obj_data | obj_prop COMMA | obj_prop;
obj_prop ::= STRING COLON IDENT | STRING COLON value;
abort ::= abort IDENT;
exit ::= exit;
if_else ::= if else | if;
if ::= if if_part;
if_part ::= if_part_await code | IDENT code;
if_part_await ::= await await_call_or_ident;
else ::= else else_part;
else_part ::= if_else | code;
code ::= CURLYOPEN statements CURLYCLOSE | CURLYOPEN CURLYCLOSE;
for ::= for IDENT IN for_variant code;
for_variant ::=  array | for_variant_await | IDENT;
for_variant_await ::= AWAIT await_call_or_ident;
assignment ::= IDENT PLUSEQUALS assignment_value | IDENT EQUALS assignment_value;
assignment_value ::= value | AWAIT await_call_or_ident | start;
start ::= start call;